(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{78:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var o=n(2),a=n(6),r=(n(0),n(87)),i={title:"Todo App"},l={unversionedId:"tutorial/todos",id:"tutorial/todos",isDocsHomePage:!1,title:"Todo App",description:"This tutorial assumes you have gone through the Github Issues Viewer",source:"@site/docs/tutorial/todos.md",slug:"/tutorial/todos",permalink:"/docs/tutorial/todos",editUrl:"https://github.com/re-rxjs/react-rxjs.org/tree/master/docs/tutorial/todos.md",version:"current",sidebar:"someSidebar",previous:{title:"Github Issues Viewer",permalink:"/docs/tutorial/github-issues"},next:{title:"bind(observable)",permalink:"/docs/api/core/bind"}},s=[{value:"Capturing user input",id:"capturing-user-input",children:[]},{value:"Creating a single stream for all the user events",id:"creating-a-single-stream-for-all-the-user-events",children:[]},{value:"Creating a stream for each todo",id:"creating-a-stream-for-each-todo",children:[]},{value:"Collecting the GroupedObservables",id:"collecting-the-groupedobservables",children:[]},{value:"Wiring up a basic version",id:"wiring-up-a-basic-version",children:[]},{value:"Adding filters",id:"adding-filters",children:[]},{value:"Adding stats",id:"adding-stats",children:[]},{value:"Summary",id:"summary",children:[]}],c={rightToc:s};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(o.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(o.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(o.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"Note")),Object(r.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"This tutorial assumes you have gone through the ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/tutorial/github-issues"}),"Github Issues Viewer"),"\ntutorial, and that you are already familiar with both ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://rxjs.dev"}),"RxJS")," and ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://reactjs.org"}),"React"),"."))),Object(r.b)("p",null,"The purpose of the tutorial is to introduce the most important APIs of the\n",Object(r.b)("inlineCode",{parentName:"p"},"@react-rxjs/utils")," package, and for that we are going to build a simple todo-list\napplication. Our app will be able to do the following:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Add todo items"),Object(r.b)("li",{parentName:"ul"},"Edit todo items"),Object(r.b)("li",{parentName:"ul"},"Delete todo items"),Object(r.b)("li",{parentName:"ul"},"Filter todo items"),Object(r.b)("li",{parentName:"ul"},"Display useful stats")),Object(r.b)("h2",{id:"capturing-user-input"},"Capturing user input"),Object(r.b)("p",null,"The first thing that we should do is to capture the events triggered by the user.\nLet's create a few ",Object(r.b)("inlineCode",{parentName:"p"},"Subject"),"s for this. Also, it's probably best if our presentational\ncomponents don't know about the existence of these Subjects. So we will also create\na set of functions that capture the user-evens and push then into the Subjects:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),'import { Subject } from "rxjs"\n\nconst newTodo$ = new Subject<string>()\nexport const onNewTodo = (text: string) => text && newTodo$.next(text)\n\nconst editTodo$ = new Subject<{ id: number; text: string }>()\nexport const onEditTodo = (id: number, text: string) =>\n  editTodo$.next({ id, text })\n\nconst toggleTodo$ = new Subject<number>()\nexport const onToggleTodo = (id: number) => toggleTodo$.next(id)\n\nconst deleteTodo$ = new Subject<number>()\nexport const onDeleteTodo = (id: number) => deleteTodo$.next(id)\n')),Object(r.b)("h2",{id:"creating-a-single-stream-for-all-the-user-events"},"Creating a single stream for all the user events"),Object(r.b)("p",null,"It would be very convenient to have a merged stream with all those events. However,\nif we did a traditional ",Object(r.b)("inlineCode",{parentName:"p"},"merge"),", then it would be very challenging to know the\norigin of each event."),Object(r.b)("p",null,"That's why ",Object(r.b)("inlineCode",{parentName:"p"},"@react-rxjs/utils")," exposes the ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"../api/utils/mergeWithKey"}),Object(r.b)("inlineCode",{parentName:"a"},"mergeWithKey")),"\noperator. Let's use it:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),"const todoActions$ = mergeWithKey({\n  add: newTodo$.pipe(map((text, id) => ({ id, text }))),\n  edit: editTodo$,\n  toggle: toggleTodo$.pipe(map(id => ({ id }))),\n  delete: deleteTodo$.pipe(map(id => ({ id })))\n})\n")),Object(r.b)("p",null,"Which is basically the same as doing this (but a lot shorter, of course \ud83d\ude04):"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),'const todoActions$ = merge(\n  newTodo$.pipe(map(text, id) => ({\n    type: "add" as const\n    payload: { id, text },\n  })),\n  editTodo$.pipe(map(payload => ({\n    type: "edit" as const,\n    payload,\n  }))),\n  toggleTodo$.pipe(map(id => ({\n    type: "toggle" as const,\n    payload: { id },\n  }))),\n  deleteTodo$.pipe(map(id => ({\n    type: "delete" as const,\n    payload: { id },\n  }))),\n)\n')),Object(r.b)("h2",{id:"creating-a-stream-for-each-todo"},"Creating a stream for each todo"),Object(r.b)("p",null,"Now that we have put all the streams together, let's create a stream for\neach todo. And for that, we will be using another operator from ",Object(r.b)("inlineCode",{parentName:"p"},"@react-rxjs/utils"),":\nthe ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"../api/utils/split"}),Object(r.b)("inlineCode",{parentName:"a"},"split"))," operator: "),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),'type Todo = { id: number, text: string, done: boolean }\n\nconst todos$: Observable<GroupedObservable<number, Todo>> = todoActions$.pipe(\n  split(\n    event => event.payload.id,\n    (event$, id) => event$.pipe(\n      takeWhile(event => event.type !== \'delete\'),\n      scan(\n        (state, action) => {\n          switch (action.type) {\n            case "add":\n            case "edit":\n              return { ...state, text: action.payload.text }\n            case "toggle":\n              return { ...state, done: !state.done}\n            default:\n              return state\n          }\n        },\n        { id, text: "", done: false } as Todo\n      )\n    )\n  )\n)\n')),Object(r.b)("p",null,"As you can see ",Object(r.b)("inlineCode",{parentName:"p"},"split")," is very similar to the ",Object(r.b)("inlineCode",{parentName:"p"},"groupBy")," operator that's exposed\nfrom RxJS. However, there are some important differences:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"The first difference is that ",Object(r.b)("inlineCode",{parentName:"p"},"split"),' doesn\'t have a "duration selector" argument\nfor determining the duration of an inner stream. Once an inner stream completes, ',Object(r.b)("inlineCode",{parentName:"p"},"split"),"\nwill forget about it, meaning that it will remove it from its internal cache.\nTherefore, if afterwords the source emits a value with the same key, then ",Object(r.b)("inlineCode",{parentName:"p"},"split"),"\nwill create (and emit) a new ",Object(r.b)("inlineCode",{parentName:"p"},"GroupedObservable"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Another important difference is the second argument of ",Object(r.b)("inlineCode",{parentName:"p"},"split"),', which allows you\nto create a complex inner stream that will become the "grouped" stream that is emitted.')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Also, this returned stream is enhanced with a ",Object(r.b)("inlineCode",{parentName:"p"},"shareReplay(1)"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"split")," internally\nsubscribes to it as soon as it is created to ensure that the consumer always has the\nlatest value."))),Object(r.b)("h2",{id:"collecting-the-groupedobservables"},"Collecting the GroupedObservables"),Object(r.b)("p",null,"Our ",Object(r.b)("inlineCode",{parentName:"p"},"todos$")," variable is an ",Object(r.b)("inlineCode",{parentName:"p"},"Observable")," of ",Object(r.b)("inlineCode",{parentName:"p"},"GroupedObservables<number, Todo>")," and\nthat in itself is not very useful. It would be a lot more convenient to have an ",Object(r.b)("inlineCode",{parentName:"p"},"Observable"),"\nof ",Object(r.b)("inlineCode",{parentName:"p"},"Map<number, Todo>"),". Which is exactly what the ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"../api/utils/collectValues"}),Object(r.b)("inlineCode",{parentName:"a"},"collectValues")),"\noperator is for. Let's try it:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"const todosMap$: Observable<Map<number, Todo>> = todos$.pipe(collectValues())\n")),Object(r.b)("p",null,"And with this we are ready to start wiring things up."),Object(r.b)("h2",{id:"wiring-up-a-basic-version"},"Wiring up a basic version"),Object(r.b)("p",null,"Let's start with the top-level component:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),"const [useTodos] = bind(todosMap$.pipe(map(todosMap => [...todosMap.values()])))\n\nfunction TodoList() {\n  const todoList = useTodos()\n\n  return (\n    <>\n      {/* <TodoListStats /> */}\n      {/* <TodoListFilters /> */}\n      <TodoItemCreator />\n\n      {todoList.map((todoItem) => (\n        <TodoItem key={todoItem.id} item={todoItem} />\n      ))}\n    </>\n  );\n}\n")),Object(r.b)("p",null,"Next, let's implement the ",Object(r.b)("inlineCode",{parentName:"p"},"TodoItemCreator"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),"function TodoItemCreator() {\n  const [inputValue, setInputValue] = useState('');\n\n  const addItem = () => {\n    onNewTodo(inputValue);\n    setInputValue('');\n  };\n\n  const onChange = ({target: {value}}) => {\n    setInputValue(value);\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={inputValue} onChange={onChange} />\n      <button onClick={addItem}>Add</button>\n    </div>\n  );\n}\n")),Object(r.b)("p",null,"And finally, the ",Object(r.b)("inlineCode",{parentName:"p"},"TodoItem")," component:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),'function TodoItem({item}) {\n  const editItemText = ({target: {value}}) => {\n    onEditTodo(item.id, value)\n  }\n\n  const toggleItemCompletion = () => {\n    onToggleTodo(item.id)\n  }\n\n  const deleteItem = () => {\n    onDeleteTodo(item.id)\n  }\n\n  return (\n    <div>\n      <input type="text" value={item.text} onChange={editItemText} />\n      <input\n        type="checkbox"\n        checked={item.done}\n        onChange={toggleItemCompletion}\n      />\n      <button onClick={deleteItem}>X</button>\n    </div>\n  )\n}\n')),Object(r.b)("p",null,"That's it! We've already got the basic version working. Now let's add the filters and\nthe stats."),Object(r.b)("h2",{id:"adding-filters"},"Adding filters"),Object(r.b)("p",null,"As we already know, we will need to capture the filter selected by the user:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),'export enum FilterType {\n  All = "all",\n  Done = "done",\n  Pending = "pending"\n}\nconst selectedFilter$ = new Subject<FilterType>()\nexport const onSelectFilter = (type: FilterType) => {\n  selectedFilter$.next(type)\n}\n')),Object(r.b)("p",null,"Next, let's create a hook and a stream for the current filter:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"const [useCurrentFilter, currentFilter$] = bind(\n  selectedFilter$.pipe(startWith(FilterType.All))\n)\n")),Object(r.b)("p",null,"Also, let's make sure that our ",Object(r.b)("inlineCode",{parentName:"p"},"useTodos")," hook takes this into account:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"const todosList$ = todosMap$.pipe(\n  map(todosMap => [...todosMap.values()]),\n  shareLatest(), // We are using shareLatest because the stats will also consume it\n)\n\nconst [useTodos] = bind(\n  combineLatest(todosList$, currentFilter$).pipe(\n    map(([todos, currentFilter]) => {\n      if (currentFilter === FilterType.All) {\n        return todos\n      }\n\n      const isDone = currentFilter === FilterType.Done\n      return todos.filter(todo => todo.done === isDone)\n    })\n  )\n)\n")),Object(r.b)("p",null,"Time to implement the ",Object(r.b)("inlineCode",{parentName:"p"},"TodoListFilters")," component:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),"function TodoListFilters() {\n  const filter = useCurrentFilter()\n\n  const updateFilter = ({target: {value}}) => {\n    onSelectFilter(value)\n  };\n\n  return (\n    <>\n      Filter:\n      <select value={filter} onChange={updateFilter}>\n        <option value={FilterType.All}>All</option>\n        <option value={FilterType.Done}>Completed</option>\n        <option value={FilterType.Pending}>Uncompleted</option>\n      </select>\n    </>\n  );\n}\n")),Object(r.b)("h2",{id:"adding-stats"},"Adding stats"),Object(r.b)("p",null,"We will be showing the following stats:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Total number of todo items"),Object(r.b)("li",{parentName:"ul"},"Total number of completed items"),Object(r.b)("li",{parentName:"ul"},"Total number of uncompleted items"),Object(r.b)("li",{parentName:"ul"},"Percentage of items completed")),Object(r.b)("p",null,"Let's create a ",Object(r.b)("inlineCode",{parentName:"p"},"useTodosStats")," for it:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"const [useTodosStats] = bind(\n  todosList$.pipe(map(todosList => {\n    const nTotal = todosList.length\n    const nCompleted = todosList.filter((item) => item.done).length\n    const nUncompleted = nTotal - nCompleted\n    const percentCompleted = \n      nTotal === 0 ? 0 : Math.round((nCompleted / nTotal) * 100)\n\n    return {\n      nTotal,\n      nCompleted,\n      nUncompleted,\n      percentCompleted,\n    }\n  }))\n)\n")),Object(r.b)("p",null,"And now let's use this hook in the ",Object(r.b)("inlineCode",{parentName:"p"},"TodoListStats")," component:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),"function TodoListStats() {\n  const { nTotal, nCompleted, nUncompleted, percentCompleted } = useTodosStats()\n\n  return (\n    <ul>\n      <li>Total items: {nTotal}</li>\n      <li>Items completed: {nCompleted}</li>\n      <li>Items not completed: {nUncompleted}</li>\n      <li>Percent completed: {percentCompleted}</li>\n    </ul>\n  );\n}\n")),Object(r.b)("h2",{id:"summary"},"Summary"),Object(r.b)("p",null,"The result of this tutorial can be seen in this CodeSandbox:"),Object(r.b)("iframe",{src:"https://codesandbox.io/embed/react-rxjs-basic-todos-6xdwu?fontsize=14&hidenavigation=1&theme=dark&view=editor&module=%2Fsrc%2Fstate.ts",style:{width:"100%",height:"500px",border:0,borderRadius:"4px",overflow:"hidden"},title:"react-rxjs-github-issues-example",allow:"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb",sandbox:"allow-modals allow-forms allow-popups allow-scripts allow-same-origin"}))}p.isMDXComponent=!0},87:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var o=n(0),a=n.n(o);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),p=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),u=o,m=d["".concat(i,".").concat(u)]||d[u]||b[u]||r;return n?a.a.createElement(m,l(l({ref:t},c),{},{components:n})):a.a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);